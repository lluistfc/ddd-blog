{
    "summary": {
        "total": 18,
        "kills": 18,
        "escapes": 0,
        "errors": 0,
        "timeouts": 0,
        "notests": 0,
        "covered_score": 100,
        "combined_score": 100,
        "mutation_coverage": 100
    },
    "uncovered": [],
    "escaped": [],
    "errored": [],
    "timeouts": [],
    "killed": [
        {
            "file": "src\/Blog\/Application\/Collections\/Collection.php",
            "mutator": "\\Humbug\\Mutator\\ReturnValue\\FunctionCall",
            "class": "\\Blog\\Application\\Collections\\Collection",
            "method": "first",
            "line": 35,
            "diff": "--- Original\n+++ New\n@@ @@\n     {\n-        return reset($this->elements);\n+        reset($this->elements); return null;\n     }\n \n     \/**\n      * @access protected\n      * @return EntityInterface|bool\n      *\/",
            "tests": [
                "Tests\\Application\\Collections\\PostCollectionTest::collectionCanReturnItsFirstElement",
                "Tests\\Application\\Collections\\PostCollectionTest::shiftWithOneElementLeavesCollectionEmpty",
                "Tests\\Application\\Collections\\PostCollectionTest::shiftRemovesFirstElement"
            ],
            "stderr": "",
            "stdout": "TAP version 13"
        },
        {
            "file": "src\/Blog\/Application\/Collections\/Collection.php",
            "mutator": "\\Humbug\\Mutator\\ReturnValue\\FunctionCall",
            "class": "\\Blog\\Application\\Collections\\Collection",
            "method": "next",
            "line": 44,
            "diff": "--- Original\n+++ New\n@@ @@\n     {\n-        return next($this->elements);\n+        next($this->elements); return null;\n     }\n \n     \/**\n      * @access protected\n      * @return EntityInterface|bool\n      *\/",
            "tests": [
                "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsNextElement",
                "Tests\\Application\\Collections\\PostCollectionTest::collectionNextElementDoesNotExist",
                "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsPrevElement"
            ],
            "stderr": "",
            "stdout": "TAP version 13"
        },
        {
            "file": "src\/Blog\/Application\/Collections\/Collection.php",
            "mutator": "\\Humbug\\Mutator\\ReturnValue\\FunctionCall",
            "class": "\\Blog\\Application\\Collections\\Collection",
            "method": "prev",
            "line": 53,
            "diff": "--- Original\n+++ New\n@@ @@\n     {\n-        return prev($this->elements);\n+        prev($this->elements); return null;\n     }\n \n     \/**\n      * @access protected\n      * @return EntityInterface\n      *\/",
            "tests": [
                "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsPrevElement",
                "Tests\\Application\\Collections\\PostCollectionTest::collectionPrevElementDoesNotExist"
            ],
            "stderr": "",
            "stdout": "TAP version 13"
        },
        {
            "file": "src\/Blog\/Application\/Collections\/Collection.php",
            "mutator": "\\Humbug\\Mutator\\ReturnValue\\FunctionCall",
            "class": "\\Blog\\Application\\Collections\\Collection",
            "method": "last",
            "line": 62,
            "diff": "--- Original\n+++ New\n@@ @@\n     {\n-        return end($this->elements);\n+        end($this->elements); return null;\n     }\n \n     \/**\n      * @param EntityInterface $element\n      * @return bool\n      * @throws ElementDoesNotExistsInCollectionException",
            "tests": [
                "Tests\\Application\\Collections\\PostCollectionTest::popWithOneElementLeavesCollectionEmpty",
                "Tests\\Application\\Collections\\PostCollectionTest::popRemovesLasElement"
            ],
            "stderr": "",
            "stdout": "TAP version 13"
        },
        {
            "file": "src\/Blog\/Application\/Collections\/Collection.php",
            "mutator": "\\Humbug\\Mutator\\Boolean\\LogicalNot",
            "class": "\\Blog\\Application\\Collections\\Collection",
            "method": "exists",
            "line": 95,
            "diff": "--- Original\n+++ New\n@@ @@\n     {\n-        return !empty($this->elements[$index]);\n+        return empty($this->elements[$index]);\n     }\n \n     \/**\n      * @access protected\n      * @param int|string $index\n      * @throws ElementDoesNotExistsInCollectionException",
            "tests": {
                "0": "Tests\\Application\\Collections\\PostCollectionTest::collectionStoresOnePost",
                "1": "Tests\\Application\\Collections\\PostCollectionTest::collectionStoresNPosts",
                "4": "Tests\\Application\\Collections\\PostCollectionTest::collectionCanReturnItsFirstElement",
                "5": "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsSpecifiedPost",
                "6": "Tests\\Application\\Collections\\PostCollectionTest::collectionThrowsExceptionIfPostDoesNotExists",
                "7": "Tests\\Application\\Collections\\PostCollectionTest::shiftWithOneElementLeavesCollectionEmpty",
                "8": "Tests\\Application\\Collections\\PostCollectionTest::popWithOneElementLeavesCollectionEmpty",
                "9": "Tests\\Application\\Collections\\PostCollectionTest::shiftRemovesFirstElement",
                "10": "Tests\\Application\\Collections\\PostCollectionTest::popRemovesLasElement",
                "11": "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsAllPosts",
                "12": "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsNextElement",
                "13": "Tests\\Application\\Collections\\PostCollectionTest::collectionNextElementDoesNotExist",
                "14": "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsPrevElement",
                "15": "Tests\\Application\\Collections\\PostCollectionTest::collectionPrevElementDoesNotExist"
            },
            "stderr": "",
            "stdout": "TAP version 13"
        },
        {
            "file": "src\/Blog\/Application\/Collections\/Collection.php",
            "mutator": "\\Humbug\\Mutator\\Boolean\\LogicalNot",
            "class": "\\Blog\\Application\\Collections\\Collection",
            "method": "checkIfElementExists",
            "line": 147,
            "diff": "--- Original\n+++ New\n@@ @@\n     {\n-        if (!$this->exists($index)) {\n+        if ($this->exists($index)) {\n             throw new ElementDoesNotExistsInCollectionException();\n         }\n     }\n \n     \/**\n      * @param $elements",
            "tests": [
                "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsSpecifiedPost",
                "Tests\\Application\\Collections\\PostCollectionTest::collectionThrowsExceptionIfPostDoesNotExists",
                "Tests\\Application\\Collections\\PostCollectionTest::shiftWithOneElementLeavesCollectionEmpty",
                "Tests\\Application\\Collections\\PostCollectionTest::popWithOneElementLeavesCollectionEmpty",
                "Tests\\Application\\Collections\\PostCollectionTest::shiftRemovesFirstElement",
                "Tests\\Application\\Collections\\PostCollectionTest::popRemovesLasElement"
            ],
            "stderr": "",
            "stdout": "TAP version 13"
        },
        {
            "file": "src\/Blog\/Application\/Validators\/Collection\/CollectionCreationValidator.php",
            "mutator": "\\Humbug\\Mutator\\Boolean\\LogicalNot",
            "class": "\\Blog\\Application\\Validators\\Collection\\CollectionCreationValidator",
            "method": "validate",
            "line": 29,
            "diff": "--- Original\n+++ New\n@@ @@\n         foreach ($this->elements as $element) {\n-            if (!array_search(EntityInterface::class, class_implements($element))) {\n+            if (array_search(EntityInterface::class, class_implements($element))) {\n                 throw new InvalidElementInCollectionException();\n             }\n         }\n \n         return true;\n     }",
            "tests": [
                "Tests\\Application\\Validators\\Collection\\CollectionCreationValidatorTest::collectionCreationtValidatesInput",
                "Tests\\Application\\Validators\\Collection\\CollectionCreationValidatorTest::collectionThrowsExceptionIfInvalidElementsInInput"
            ],
            "stderr": "",
            "stdout": "TAP version 13"
        },
        {
            "file": "src\/Blog\/Application\/Validators\/Collection\/CollectionCreationValidator.php",
            "mutator": "\\Humbug\\Mutator\\Boolean\\TrueValue",
            "class": "\\Blog\\Application\\Validators\\Collection\\CollectionCreationValidator",
            "method": "validate",
            "line": 34,
            "diff": "--- Original\n+++ New\n@@ @@\n \n-        return true;\n+        return false;\n     }\n }\n",
            "tests": {
                "0": "Tests\\Application\\Collections\\PostCollectionTest::collectionCanOnlyStorePosts",
                "1": "Tests\\Application\\Collections\\PostCollectionTest::collectionStoresOnePost",
                "2": "Tests\\Application\\Collections\\PostCollectionTest::collectionStoresNPosts",
                "5": "Tests\\Application\\Collections\\PostCollectionTest::collectionCanReturnItsFirstElement",
                "6": "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsSpecifiedPost",
                "7": "Tests\\Application\\Collections\\PostCollectionTest::collectionThrowsExceptionIfPostDoesNotExists",
                "8": "Tests\\Application\\Collections\\PostCollectionTest::shiftWithOneElementLeavesCollectionEmpty",
                "9": "Tests\\Application\\Collections\\PostCollectionTest::popWithOneElementLeavesCollectionEmpty",
                "10": "Tests\\Application\\Collections\\PostCollectionTest::shiftRemovesFirstElement",
                "11": "Tests\\Application\\Collections\\PostCollectionTest::popRemovesLasElement",
                "12": "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsAllPosts",
                "13": "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsNextElement",
                "14": "Tests\\Application\\Collections\\PostCollectionTest::collectionNextElementDoesNotExist",
                "15": "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsPrevElement",
                "16": "Tests\\Application\\Collections\\PostCollectionTest::collectionPrevElementDoesNotExist",
                "17": "Application\\Queries\\Post\\PostQueriesTest::queryReturnsEmptyCollectionWhenWeHaveNoPosts",
                "18": "Tests\\Application\\Validators\\Collection\\CollectionCreationValidatorTest::collectionCreationtValidatesInput"
            },
            "stderr": "",
            "stdout": "TAP version 13"
        },
        {
            "file": "src\/Blog\/Domain\/DataObject\/Email\/Email.php",
            "mutator": "\\Humbug\\Mutator\\ReturnValue\\NewObject",
            "class": "\\Blog\\Domain\\DataObject\\Email\\Email",
            "method": "create",
            "line": 33,
            "diff": "--- Original\n+++ New\n@@ @@\n     {\n-        return new Email($userName, $host);\n+        new Email($userName, $host); return null;\n     }\n \n     \/**\n      * Email constructor.\n      * @access private\n      * @param UserName $userName",
            "tests": [
                "Tests\\Domain\\DataObject\\Email\\EmailTest::emptyEmailReturnsOnlyAtSymbol",
                "Tests\\Domain\\DataObject\\Email\\EmailTest::emailIsCreatedWithUserNameAndHost",
                "Tests\\Domain\\DataObject\\Email\\EmailTest::emailDataObjectCanBePrinted",
                "Tests\\Domain\\Entity\\UserTest::userIsCreatedEmpty",
                "Tests\\Domain\\Entity\\UserTest::userHasAllFieldsFilled"
            ],
            "stderr": "",
            "stdout": "TAP version 13"
        },
        {
            "file": "src\/Blog\/Domain\/DataObject\/Name\/PersonName.php",
            "mutator": "\\Humbug\\Mutator\\ReturnValue\\NewObject",
            "class": "\\Blog\\Domain\\DataObject\\Name\\PersonName",
            "method": "create",
            "line": 32,
            "diff": "--- Original\n+++ New\n@@ @@\n     {\n-        return new PersonName($firstName, $lastName);\n+        new PersonName($firstName, $lastName); return null;\n     }\n \n     \/**\n      * PersonName constructor.\n      * @access private\n      * @param string $firstName",
            "tests": [
                "Tests\\Domain\\DataObject\\Name\\PersonNameTest::personCanHaveOnlyFirstName",
                "Tests\\Domain\\DataObject\\Name\\PersonNameTest::personHasLastName",
                "Tests\\Domain\\DataObject\\Name\\PersonNameTest::personHasFullName",
                "Tests\\Domain\\DataObject\\Name\\PersonNameTest::personNameDataObjectCanBePrinted",
                "Tests\\Domain\\Entity\\UserTest::userIsCreatedEmpty",
                "Tests\\Domain\\Entity\\UserTest::userHasAllFieldsFilled"
            ],
            "stderr": "",
            "stdout": "TAP version 13"
        },
        {
            "file": "src\/Blog\/Domain\/DataObject\/Name\/PersonName.php",
            "mutator": "\\Humbug\\Mutator\\ConditionalNegation\\NotIdentical",
            "class": "\\Blog\\Domain\\DataObject\\Name\\PersonName",
            "method": "get",
            "line": 91,
            "diff": "--- Original\n+++ New\n@@ @@\n \n-        if ($this->getLastName() !== BString::BLANK) {\n+        if ($this->getLastName() === BString::BLANK) {\n             $fullName .= BString::SPACE . $this->getLastName();\n         }\n \n         return $fullName;\n     }\n ",
            "tests": [
                "Tests\\Domain\\DataObject\\Name\\PersonNameTest::personCanHaveOnlyFirstName",
                "Tests\\Domain\\DataObject\\Name\\PersonNameTest::personHasFullName",
                "Tests\\Domain\\DataObject\\Name\\PersonNameTest::personNameDataObjectCanBePrinted",
                "Tests\\Domain\\Entity\\UserTest::userIsCreatedEmpty",
                "Tests\\Domain\\Entity\\UserTest::userHasAllFieldsFilled"
            ],
            "stderr": "",
            "stdout": "TAP version 13"
        },
        {
            "file": "src\/Blog\/Domain\/DataObject\/Name\/UserName.php",
            "mutator": "\\Humbug\\Mutator\\ReturnValue\\NewObject",
            "class": "\\Blog\\Domain\\DataObject\\Name\\UserName",
            "method": "create",
            "line": 25,
            "diff": "--- Original\n+++ New\n@@ @@\n     {\n-        return new UserName($firstName);\n+        new UserName($firstName); return null;\n     }\n \n     \/**\n      * UserName constructor.\n      * @access private\n      * @param string $firstName",
            "tests": [
                "Tests\\Domain\\DataObject\\Email\\EmailTest::emptyEmailReturnsOnlyAtSymbol",
                "Tests\\Domain\\DataObject\\Email\\EmailTest::emailIsCreatedWithUserNameAndHost",
                "Tests\\Domain\\DataObject\\Email\\EmailTest::emailDataObjectCanBePrinted",
                "Tests\\Domain\\DataObject\\Name\\UserNameTest::userHasName",
                "Tests\\Domain\\DataObject\\Name\\UserNameTest::personNameDataObjectCanBePrinted",
                "Tests\\Domain\\Entity\\UserTest::userIsCreatedEmpty",
                "Tests\\Domain\\Entity\\UserTest::userHasAllFieldsFilled"
            ],
            "stderr": "",
            "stdout": "TAP version 13"
        },
        {
            "file": "src\/Blog\/Domain\/Entity\/User.php",
            "mutator": "\\Humbug\\Mutator\\ConditionalNegation\\Identical",
            "class": "\\Blog\\Domain\\Entity\\User",
            "method": "getEmail",
            "line": 168,
            "diff": "--- Original\n+++ New\n@@ @@\n         $emailAddress = $this->email->get();\n-        return BString::AT === $emailAddress ? BString::BLANK : $emailAddress;\n+        return BString::AT !== $emailAddress ? BString::BLANK : $emailAddress;\n     }\n \n     \/**\n      * @access public\n      * @return \\DateTime\n      *\/",
            "tests": [
                "Tests\\Domain\\Entity\\UserTest::userIsCreatedEmpty"
            ],
            "stderr": "",
            "stdout": "TAP version 13"
        },
        {
            "file": "src\/Blog\/Domain\/Validators\/DataObject\/Email\/EmailValidator.php",
            "mutator": "\\Humbug\\Mutator\\Boolean\\LogicalNot",
            "class": "\\Blog\\Domain\\Validators\\DataObject\\Email\\EmailValidator",
            "method": "validate",
            "line": 32,
            "diff": "--- Original\n+++ New\n@@ @@\n     {\n-        if (!filter_var($this->email, FILTER_VALIDATE_EMAIL)) {\n+        if (filter_var($this->email, FILTER_VALIDATE_EMAIL)) {\n             throw new InvalidEmailFormatException();\n         }\n \n         return true;\n     }\n }",
            "tests": [
                "Tests\\Domain\\Validators\\DataObject\\Email\\EmailValidatorTest::emailIsValid",
                "Tests\\Domain\\Validators\\DataObject\\Email\\EmailValidatorTest::invalidEmailFormat"
            ],
            "stderr": "",
            "stdout": "TAP version 13"
        },
        {
            "file": "src\/Blog\/Domain\/Validators\/DataObject\/Email\/EmailValidator.php",
            "mutator": "\\Humbug\\Mutator\\Boolean\\TrueValue",
            "class": "\\Blog\\Domain\\Validators\\DataObject\\Email\\EmailValidator",
            "method": "validate",
            "line": 36,
            "diff": "--- Original\n+++ New\n@@ @@\n \n-        return true;\n+        return false;\n     }\n }\n",
            "tests": [
                "Tests\\Domain\\Validators\\DataObject\\Email\\EmailValidatorTest::emailIsValid"
            ],
            "stderr": "",
            "stdout": "TAP version 13"
        },
        {
            "file": "src\/Blog\/Domain\/Validators\/DataObject\/Name\/PersonNameValidator.php",
            "mutator": "\\Humbug\\Mutator\\Boolean\\TrueValue",
            "class": "\\Blog\\Domain\\Validators\\DataObject\\Name\\PersonNameValidator",
            "method": "validate",
            "line": 41,
            "diff": "--- Original\n+++ New\n@@ @@\n \n-        return true;\n+        return false;\n     }\n }\n",
            "tests": [
                "Tests\\Domain\\Validators\\DataObject\\Post\\PersonNameValidatorTest::personNameIsValid"
            ],
            "stderr": "",
            "stdout": "TAP version 13"
        },
        {
            "file": "src\/Blog\/Domain\/Validators\/DataObject\/Name\/UserNameValidator.php",
            "mutator": "\\Humbug\\Mutator\\Boolean\\TrueValue",
            "class": "\\Blog\\Domain\\Validators\\DataObject\\Name\\UserNameValidator",
            "method": "validate",
            "line": 40,
            "diff": "--- Original\n+++ New\n@@ @@\n \n-        return true;\n+        return false;\n     }\n }\n",
            "tests": [
                "Tests\\Domain\\Validators\\DataObject\\Post\\UserNameValidatorTest::userNameIsValid"
            ],
            "stderr": "",
            "stdout": "TAP version 13"
        },
        {
            "file": "src\/Blog\/Domain\/Validators\/Post\/CreatePostValidator.php",
            "mutator": "\\Humbug\\Mutator\\Boolean\\TrueValue",
            "class": "\\Blog\\Domain\\Validators\\Post\\CreatePostValidator",
            "method": "validate",
            "line": 40,
            "diff": "--- Original\n+++ New\n@@ @@\n \n-        return true;\n+        return false;\n     }\n }\n",
            "tests": [
                "Tests\\Application\\Handler\\Post\\CreatePostCommandHandlerTest::createPostCommandWasHandled",
                "Tests\\Domain\\Validators\\Post\\CreatePostValidatorTest::postIsValidated"
            ],
            "stderr": "",
            "stdout": "TAP version 13"
        }
    ]
}