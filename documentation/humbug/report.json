{
    "summary": {
        "total": 20,
        "kills": 20,
        "escapes": 0,
        "errors": 0,
        "timeouts": 0,
        "notests": 0,
        "covered_score": 100,
        "combined_score": 100,
        "mutation_coverage": 100
    },
    "uncovered": [],
    "escaped": [],
    "errored": [],
    "timeouts": [],
    "killed": [
        {
            "file": "src\/Blog\/Application\/Collections\/Collection.php",
            "mutator": "\\Humbug\\Mutator\\ReturnValue\\FunctionCall",
            "class": "\\Blog\\Application\\Collections\\Collection",
            "method": "first",
            "line": 35,
            "diff": "--- Original\n+++ New\n@@ @@\n     {\n-        return reset($this->elements);\n+        reset($this->elements); return null;\n     }\n \n     \/**\n      * @access protected\n      * @return Entity|bool\n      *\/",
            "tests": [
                "Tests\\Application\\Collections\\PostCollectionTest::collectionCanReturnItsFirstElement",
                "Tests\\Application\\Collections\\PostCollectionTest::shiftWithOneElementLeavesCollectionEmpty",
                "Tests\\Application\\Collections\\PostCollectionTest::shiftRemovesFirstElement"
            ],
            "stderr": "",
            "stdout": "TAP version 13"
        },
        {
            "file": "src\/Blog\/Application\/Collections\/Collection.php",
            "mutator": "\\Humbug\\Mutator\\ReturnValue\\FunctionCall",
            "class": "\\Blog\\Application\\Collections\\Collection",
            "method": "next",
            "line": 44,
            "diff": "--- Original\n+++ New\n@@ @@\n     {\n-        return next($this->elements);\n+        next($this->elements); return null;\n     }\n \n     \/**\n      * @access protected\n      * @return Entity|bool\n      *\/",
            "tests": [
                "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsNextElement",
                "Tests\\Application\\Collections\\PostCollectionTest::collectionNextElementDoesNotExist",
                "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsPrevElement"
            ],
            "stderr": "",
            "stdout": "TAP version 13"
        },
        {
            "file": "src\/Blog\/Application\/Collections\/Collection.php",
            "mutator": "\\Humbug\\Mutator\\ReturnValue\\FunctionCall",
            "class": "\\Blog\\Application\\Collections\\Collection",
            "method": "prev",
            "line": 53,
            "diff": "--- Original\n+++ New\n@@ @@\n     {\n-        return prev($this->elements);\n+        prev($this->elements); return null;\n     }\n \n     \/**\n      * @access protected\n      * @return Entity\n      *\/",
            "tests": [
                "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsPrevElement",
                "Tests\\Application\\Collections\\PostCollectionTest::collectionPrevElementDoesNotExist"
            ],
            "stderr": "",
            "stdout": "TAP version 13"
        },
        {
            "file": "src\/Blog\/Application\/Collections\/Collection.php",
            "mutator": "\\Humbug\\Mutator\\ReturnValue\\FunctionCall",
            "class": "\\Blog\\Application\\Collections\\Collection",
            "method": "last",
            "line": 62,
            "diff": "--- Original\n+++ New\n@@ @@\n     {\n-        return end($this->elements);\n+        end($this->elements); return null;\n     }\n \n     \/**\n      * @param Entity $element\n      * @return bool\n      * @throws ElementDoesNotExistsInCollectionException",
            "tests": [
                "Tests\\Application\\Collections\\PostCollectionTest::popWithOneElementLeavesCollectionEmpty",
                "Tests\\Application\\Collections\\PostCollectionTest::popRemovesLasElement"
            ],
            "stderr": "",
            "stdout": "TAP version 13"
        },
        {
            "file": "src\/Blog\/Application\/Collections\/Collection.php",
            "mutator": "\\Humbug\\Mutator\\Boolean\\LogicalNot",
            "class": "\\Blog\\Application\\Collections\\Collection",
            "method": "exists",
            "line": 95,
            "diff": "--- Original\n+++ New\n@@ @@\n     {\n-        return !empty($this->elements[$index]);\n+        return empty($this->elements[$index]);\n     }\n \n     \/**\n      * @access protected\n      * @param int|string $index\n      * @throws ElementDoesNotExistsInCollectionException",
            "tests": {
                "0": "Tests\\Application\\Collections\\PostCollectionTest::collectionStoresOnePost",
                "1": "Tests\\Application\\Collections\\PostCollectionTest::collectionStoresNPosts",
                "4": "Tests\\Application\\Collections\\PostCollectionTest::collectionCanReturnItsFirstElement",
                "5": "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsSpecifiedPost",
                "6": "Tests\\Application\\Collections\\PostCollectionTest::collectionThrowsExceptionIfPostDoesNotExists",
                "7": "Tests\\Application\\Collections\\PostCollectionTest::shiftWithOneElementLeavesCollectionEmpty",
                "8": "Tests\\Application\\Collections\\PostCollectionTest::popWithOneElementLeavesCollectionEmpty",
                "9": "Tests\\Application\\Collections\\PostCollectionTest::shiftRemovesFirstElement",
                "10": "Tests\\Application\\Collections\\PostCollectionTest::popRemovesLasElement",
                "11": "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsAllPosts",
                "12": "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsNextElement",
                "13": "Tests\\Application\\Collections\\PostCollectionTest::collectionNextElementDoesNotExist",
                "14": "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsPrevElement",
                "15": "Tests\\Application\\Collections\\PostCollectionTest::collectionPrevElementDoesNotExist"
            },
            "stderr": "",
            "stdout": "TAP version 13"
        },
        {
            "file": "src\/Blog\/Application\/Collections\/Collection.php",
            "mutator": "\\Humbug\\Mutator\\Boolean\\LogicalNot",
            "class": "\\Blog\\Application\\Collections\\Collection",
            "method": "checkIfElementExists",
            "line": 147,
            "diff": "--- Original\n+++ New\n@@ @@\n     {\n-        if (!$this->exists($index)) {\n+        if ($this->exists($index)) {\n             throw new ElementDoesNotExistsInCollectionException();\n         }\n     }\n \n     \/**\n      * @param $elements",
            "tests": [
                "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsSpecifiedPost",
                "Tests\\Application\\Collections\\PostCollectionTest::collectionThrowsExceptionIfPostDoesNotExists",
                "Tests\\Application\\Collections\\PostCollectionTest::shiftWithOneElementLeavesCollectionEmpty",
                "Tests\\Application\\Collections\\PostCollectionTest::popWithOneElementLeavesCollectionEmpty",
                "Tests\\Application\\Collections\\PostCollectionTest::shiftRemovesFirstElement",
                "Tests\\Application\\Collections\\PostCollectionTest::popRemovesLasElement"
            ],
            "stderr": "",
            "stdout": "TAP version 13"
        },
        {
            "file": "src\/Blog\/Application\/Collections\/Collection.php",
            "mutator": "\\Humbug\\Mutator\\ReturnValue\\BracketedStatement",
            "class": "\\Blog\\Application\\Collections\\Collection",
            "method": "validateInput",
            "line": 158,
            "diff": "--- Original\n+++ New\n@@ @@\n     {\n-        return (new CollectionCreationValidator())->validate($elements);\n+        (new CollectionCreationValidator())->validate($elements); return null;\n     }\n }\n",
            "tests": {
                "0": "Tests\\Application\\Collections\\PostCollectionTest::collectionCanOnlyStorePosts",
                "1": "Tests\\Application\\Collections\\PostCollectionTest::collectionStoresOnePost",
                "2": "Tests\\Application\\Collections\\PostCollectionTest::collectionStoresNPosts",
                "5": "Tests\\Application\\Collections\\PostCollectionTest::collectionCanReturnItsFirstElement",
                "6": "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsSpecifiedPost",
                "7": "Tests\\Application\\Collections\\PostCollectionTest::collectionThrowsExceptionIfPostDoesNotExists",
                "8": "Tests\\Application\\Collections\\PostCollectionTest::shiftWithOneElementLeavesCollectionEmpty",
                "9": "Tests\\Application\\Collections\\PostCollectionTest::popWithOneElementLeavesCollectionEmpty",
                "10": "Tests\\Application\\Collections\\PostCollectionTest::shiftRemovesFirstElement",
                "11": "Tests\\Application\\Collections\\PostCollectionTest::popRemovesLasElement",
                "12": "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsAllPosts",
                "13": "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsNextElement",
                "14": "Tests\\Application\\Collections\\PostCollectionTest::collectionNextElementDoesNotExist",
                "15": "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsPrevElement",
                "16": "Tests\\Application\\Collections\\PostCollectionTest::collectionPrevElementDoesNotExist",
                "17": "Application\\Queries\\Post\\PostQueriesTest::queryReturnsEmptyCollectionWhenWeHaveNoPosts"
            },
            "stderr": "",
            "stdout": "TAP version 13"
        },
        {
            "file": "src\/Blog\/Application\/Validators\/Collection\/CollectionCreationValidator.php",
            "mutator": "\\Humbug\\Mutator\\Boolean\\LogicalNot",
            "class": "\\Blog\\Application\\Validators\\Collection\\CollectionCreationValidator",
            "method": "validate",
            "line": 18,
            "diff": "--- Original\n+++ New\n@@ @@\n         foreach ($elements as $element) {\n-            if (!$element instanceof Entity) {\n+            if ($element instanceof Entity) {\n                 throw new InvalidElementInCollectionException();\n             }\n         }\n \n         return true;\n     }",
            "tests": [
                "Tests\\Application\\Validators\\Collection\\CollectionCreationValidatorTest::collectionCreationtValidatesInput",
                "Tests\\Application\\Validators\\Collection\\CollectionCreationValidatorTest::collectionThrowsExceptionIfInvalidElementsInInput"
            ],
            "stderr": "",
            "stdout": "TAP version 13"
        },
        {
            "file": "src\/Blog\/Application\/Validators\/Collection\/CollectionCreationValidator.php",
            "mutator": "\\Humbug\\Mutator\\Boolean\\TrueValue",
            "class": "\\Blog\\Application\\Validators\\Collection\\CollectionCreationValidator",
            "method": "validate",
            "line": 23,
            "diff": "--- Original\n+++ New\n@@ @@\n \n-        return true;\n+        return false;\n     }\n }\n",
            "tests": {
                "0": "Tests\\Application\\Collections\\PostCollectionTest::collectionCanOnlyStorePosts",
                "1": "Tests\\Application\\Collections\\PostCollectionTest::collectionStoresOnePost",
                "2": "Tests\\Application\\Collections\\PostCollectionTest::collectionStoresNPosts",
                "5": "Tests\\Application\\Collections\\PostCollectionTest::collectionCanReturnItsFirstElement",
                "6": "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsSpecifiedPost",
                "7": "Tests\\Application\\Collections\\PostCollectionTest::collectionThrowsExceptionIfPostDoesNotExists",
                "8": "Tests\\Application\\Collections\\PostCollectionTest::shiftWithOneElementLeavesCollectionEmpty",
                "9": "Tests\\Application\\Collections\\PostCollectionTest::popWithOneElementLeavesCollectionEmpty",
                "10": "Tests\\Application\\Collections\\PostCollectionTest::shiftRemovesFirstElement",
                "11": "Tests\\Application\\Collections\\PostCollectionTest::popRemovesLasElement",
                "12": "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsAllPosts",
                "13": "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsNextElement",
                "14": "Tests\\Application\\Collections\\PostCollectionTest::collectionNextElementDoesNotExist",
                "15": "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsPrevElement",
                "16": "Tests\\Application\\Collections\\PostCollectionTest::collectionPrevElementDoesNotExist",
                "17": "Application\\Queries\\Post\\PostQueriesTest::queryReturnsEmptyCollectionWhenWeHaveNoPosts",
                "18": "Tests\\Application\\Validators\\Collection\\CollectionCreationValidatorTest::collectionCreationtValidatesInput"
            },
            "stderr": "",
            "stdout": "TAP version 13"
        },
        {
            "file": "src\/Blog\/Domain\/DataObject\/Email\/Email.php",
            "mutator": "\\Humbug\\Mutator\\Boolean\\LogicalNot",
            "class": "\\Blog\\Domain\\DataObject\\Email\\Email",
            "method": "create",
            "line": 35,
            "diff": "--- Original\n+++ New\n@@ @@\n     {\n-        if (!filter_var($userName->getFirstName() . BString::AT . $host, FILTER_VALIDATE_EMAIL)) {\n+        if (filter_var($userName->getFirstName() . BString::AT . $host, FILTER_VALIDATE_EMAIL)) {\n             throw new InvalidEmailFormatException();\n         }\n         return new Email($userName, $host);\n     }\n \n     \/**",
            "tests": {
                "0": "Tests\\Domain\\DataObject\\Email\\EmailTest::invalidDataThrowsException",
                "5": "Tests\\Domain\\DataObject\\Email\\EmailTest::emailIsCreatedWithUserNameAndHost",
                "6": "Tests\\Domain\\DataObject\\Email\\EmailTest::emailDataObjectCanBePrinted",
                "7": "Tests\\Domain\\Entity\\UserTest::userHasAllFieldsFilled"
            },
            "stderr": "",
            "stdout": "TAP version 13"
        },
        {
            "file": "src\/Blog\/Domain\/DataObject\/Email\/Email.php",
            "mutator": "\\Humbug\\Mutator\\ReturnValue\\NewObject",
            "class": "\\Blog\\Domain\\DataObject\\Email\\Email",
            "method": "create",
            "line": 38,
            "diff": "--- Original\n+++ New\n@@ @@\n         }\n-        return new Email($userName, $host);\n+        new Email($userName, $host); return null;\n     }\n \n     \/**\n      * Email constructor.\n      * @access private\n      * @param UserName $userName",
            "tests": [
                "Tests\\Domain\\DataObject\\Email\\EmailTest::emailIsCreatedWithUserNameAndHost",
                "Tests\\Domain\\DataObject\\Email\\EmailTest::emailDataObjectCanBePrinted",
                "Tests\\Domain\\Entity\\UserTest::userHasAllFieldsFilled"
            ],
            "stderr": "",
            "stdout": "TAP version 13"
        },
        {
            "file": "src\/Blog\/Domain\/DataObject\/Name\/PersonName.php",
            "mutator": "\\Humbug\\Mutator\\ReturnValue\\NewObject",
            "class": "\\Blog\\Domain\\DataObject\\Name\\PersonName",
            "method": "create",
            "line": 36,
            "diff": "--- Original\n+++ New\n@@ @@\n         }\n-        return new PersonName($firstName, $lastName);\n+        new PersonName($firstName, $lastName); return null;\n     }\n \n     \/**\n      * PersonName constructor.\n      * @access private\n      * @param string $firstName",
            "tests": [
                "Tests\\Domain\\DataObject\\Name\\PersonNameTest::personCanHaveOnlyFirstName",
                "Tests\\Domain\\DataObject\\Name\\PersonNameTest::personHasLastName",
                "Tests\\Domain\\DataObject\\Name\\PersonNameTest::personHasFullName",
                "Tests\\Domain\\DataObject\\Name\\PersonNameTest::personNameDataObjectCanBePrinted",
                "Tests\\Domain\\Entity\\UserTest::userHasAllFieldsFilled"
            ],
            "stderr": "",
            "stdout": "TAP version 13"
        },
        {
            "file": "src\/Blog\/Domain\/DataObject\/Name\/PersonName.php",
            "mutator": "\\Humbug\\Mutator\\ConditionalNegation\\NotIdentical",
            "class": "\\Blog\\Domain\\DataObject\\Name\\PersonName",
            "method": "get",
            "line": 95,
            "diff": "--- Original\n+++ New\n@@ @@\n \n-        if ($this->getLastName() !== BString::BLANK) {\n+        if ($this->getLastName() === BString::BLANK) {\n             $fullName .= BString::SPACE . $this->getLastName();\n         }\n \n         return $fullName;\n     }\n ",
            "tests": [
                "Tests\\Domain\\DataObject\\Name\\PersonNameTest::personCanHaveOnlyFirstName",
                "Tests\\Domain\\DataObject\\Name\\PersonNameTest::personHasFullName",
                "Tests\\Domain\\DataObject\\Name\\PersonNameTest::personNameDataObjectCanBePrinted",
                "Tests\\Domain\\Entity\\UserTest::userHasAllFieldsFilled"
            ],
            "stderr": "",
            "stdout": "TAP version 13"
        },
        {
            "file": "src\/Blog\/Domain\/DataObject\/Name\/UserName.php",
            "mutator": "\\Humbug\\Mutator\\ReturnValue\\NewObject",
            "class": "\\Blog\\Domain\\DataObject\\Name\\UserName",
            "method": "create",
            "line": 29,
            "diff": "--- Original\n+++ New\n@@ @@\n         }\n-        return new UserName($firstName);\n+        new UserName($firstName); return null;\n     }\n \n     \/**\n      * UserName constructor.\n      * @access private\n      * @param string $firstName",
            "tests": {
                "0": "Tests\\Domain\\DataObject\\Email\\EmailTest::invalidDataThrowsException",
                "5": "Tests\\Domain\\DataObject\\Email\\EmailTest::emailIsCreatedWithUserNameAndHost",
                "6": "Tests\\Domain\\DataObject\\Email\\EmailTest::emailDataObjectCanBePrinted",
                "7": "Tests\\Domain\\DataObject\\Name\\UserNameTest::userHasName",
                "8": "Tests\\Domain\\DataObject\\Name\\UserNameTest::personNameDataObjectCanBePrinted",
                "9": "Tests\\Domain\\Entity\\UserTest::userHasAllFieldsFilled"
            },
            "stderr": "",
            "stdout": "TAP version 13"
        },
        {
            "file": "src\/Blog\/Domain\/Entity\/Post.php",
            "mutator": "\\Humbug\\Mutator\\ReturnValue\\NewObject",
            "class": "\\Blog\\Domain\\Entity\\Post",
            "method": "publish",
            "line": 53,
            "diff": "--- Original\n+++ New\n@@ @@\n         (new CreatePostValidator())->validate(func_get_args());\n-        return new Post($id, $title, $content, $state, $published, $publishedAt);\n+        new Post($id, $title, $content, $state, $published, $publishedAt); return null;\n     }\n \n     protected function __construct($id, string $title, string $content, string $state, bool $published, \\DateTime $publishedAt)\n     {\n         $this->setId($id);\n         $this->setTitle($title);",
            "tests": {
                "0": "Tests\\Application\\Collections\\PostCollectionTest::collectionStoresOnePost",
                "1": "Tests\\Application\\Collections\\PostCollectionTest::collectionStoresNPosts",
                "4": "Tests\\Application\\Collections\\PostCollectionTest::collectionCanReturnItsFirstElement",
                "5": "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsSpecifiedPost",
                "6": "Tests\\Application\\Collections\\PostCollectionTest::shiftWithOneElementLeavesCollectionEmpty",
                "7": "Tests\\Application\\Collections\\PostCollectionTest::popWithOneElementLeavesCollectionEmpty",
                "8": "Tests\\Application\\Collections\\PostCollectionTest::shiftRemovesFirstElement",
                "9": "Tests\\Application\\Collections\\PostCollectionTest::popRemovesLasElement",
                "10": "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsAllPosts",
                "11": "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsNextElement",
                "12": "Tests\\Application\\Collections\\PostCollectionTest::collectionNextElementDoesNotExist",
                "13": "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsPrevElement",
                "14": "Tests\\Application\\Collections\\PostCollectionTest::collectionPrevElementDoesNotExist",
                "15": "Tests\\Application\\Command\\Post\\CreateTest::postWasCreated",
                "16": "Tests\\Application\\Handler\\Post\\CreatePostHandlerTest::createPostWasHandled",
                "17": "Application\\Queries\\Post\\PostQueriesTest::queryReturnsPostById",
                "18": "Application\\Queries\\Post\\PostQueriesTest::queryReturnsNewestPost",
                "19": "Tests\\Application\\Validators\\Collection\\CollectionCreationValidatorTest::collectionCreationtValidatesInput",
                "20": "Tests\\Domain\\Entity\\PostTest::postAttributesAreSet",
                "21": "Tests\\Domain\\Entity\\PostTest::postIsNotPublished"
            },
            "stderr": "",
            "stdout": "TAP version 13"
        },
        {
            "file": "src\/Blog\/Domain\/Entity\/User.php",
            "mutator": "\\Humbug\\Mutator\\ReturnValue\\NewObject",
            "class": "\\Blog\\Domain\\Entity\\User",
            "method": "register",
            "line": 34,
            "diff": "--- Original\n+++ New\n@@ @@\n     {\n-        return new User($id, $personNamem, $userName, $email);\n+        new User($id, $personNamem, $userName, $email); return null;\n     }\n \n     \/**\n      * User constructor.\n      * @access public\n      * @param PersonName $personNamem",
            "tests": [
                "Tests\\Domain\\Entity\\UserTest::userHasAllFieldsFilled"
            ],
            "stderr": "",
            "stdout": "TAP version 13"
        },
        {
            "file": "src\/Blog\/Domain\/Validators\/Post\/CreatePostValidator.php",
            "mutator": "\\Humbug\\Mutator\\Boolean\\LogicalNot",
            "class": "\\Blog\\Domain\\Validators\\Post\\CreatePostValidator",
            "method": "validate",
            "line": 35,
            "diff": "--- Original\n+++ New\n@@ @@\n     {\n-        if (!is_array($valuesToValidate)) {\n+        if (is_array($valuesToValidate)) {\n             throw new InvalidArgumentException();\n         }\n \n         $postValues = [\n             Post::ID => isset($valuesToValidate[Post::ID])\n                 ? $valuesToValidate[Post::ID]",
            "tests": {
                "0": "Tests\\Application\\Collections\\PostCollectionTest::collectionStoresOnePost",
                "1": "Tests\\Application\\Collections\\PostCollectionTest::collectionStoresNPosts",
                "4": "Tests\\Application\\Collections\\PostCollectionTest::collectionCanReturnItsFirstElement",
                "5": "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsSpecifiedPost",
                "6": "Tests\\Application\\Collections\\PostCollectionTest::shiftWithOneElementLeavesCollectionEmpty",
                "7": "Tests\\Application\\Collections\\PostCollectionTest::popWithOneElementLeavesCollectionEmpty",
                "8": "Tests\\Application\\Collections\\PostCollectionTest::shiftRemovesFirstElement",
                "9": "Tests\\Application\\Collections\\PostCollectionTest::popRemovesLasElement",
                "10": "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsAllPosts",
                "11": "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsNextElement",
                "12": "Tests\\Application\\Collections\\PostCollectionTest::collectionNextElementDoesNotExist",
                "13": "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsPrevElement",
                "14": "Tests\\Application\\Collections\\PostCollectionTest::collectionPrevElementDoesNotExist",
                "15": "Tests\\Application\\Command\\Post\\CreateTest::postWasCreated",
                "16": "Tests\\Application\\Handler\\Post\\CreatePostHandlerTest::createPostWasHandled",
                "17": "Tests\\Application\\Handler\\Post\\CreatePostHandlerTest::invalidDataThrowsValidationException",
                "18": "Application\\Queries\\Post\\PostQueriesTest::queryReturnsPostById",
                "19": "Application\\Queries\\Post\\PostQueriesTest::queryReturnsNewestPost",
                "20": "Tests\\Application\\Validators\\Collection\\CollectionCreationValidatorTest::collectionCreationtValidatesInput",
                "21": "Tests\\Domain\\Entity\\PostTest::postAttributesAreSet",
                "22": "Tests\\Domain\\Entity\\PostTest::postIsNotPublished"
            },
            "stderr": "",
            "stdout": "TAP version 13"
        },
        {
            "file": "src\/Blog\/Domain\/Validators\/Post\/CreatePostValidator.php",
            "mutator": "\\Humbug\\Mutator\\Boolean\\LogicalNot",
            "class": "\\Blog\\Domain\\Validators\\Post\\CreatePostValidator",
            "method": "validate",
            "line": 60,
            "diff": "--- Original\n+++ New\n@@ @@\n \n-        if (!is_integer($postValues[Post::ID])) {\n+        if (is_integer($postValues[Post::ID])) {\n             throw new MissingIdentifierException();\n         }\n \n         if (empty($postValues[Post::TITLE])) {\n             throw new PostNeedsTitleException();\n         }",
            "tests": {
                "0": "Tests\\Application\\Collections\\PostCollectionTest::collectionStoresOnePost",
                "1": "Tests\\Application\\Collections\\PostCollectionTest::collectionStoresNPosts",
                "4": "Tests\\Application\\Collections\\PostCollectionTest::collectionCanReturnItsFirstElement",
                "5": "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsSpecifiedPost",
                "6": "Tests\\Application\\Collections\\PostCollectionTest::shiftWithOneElementLeavesCollectionEmpty",
                "7": "Tests\\Application\\Collections\\PostCollectionTest::popWithOneElementLeavesCollectionEmpty",
                "8": "Tests\\Application\\Collections\\PostCollectionTest::shiftRemovesFirstElement",
                "9": "Tests\\Application\\Collections\\PostCollectionTest::popRemovesLasElement",
                "10": "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsAllPosts",
                "11": "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsNextElement",
                "12": "Tests\\Application\\Collections\\PostCollectionTest::collectionNextElementDoesNotExist",
                "13": "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsPrevElement",
                "14": "Tests\\Application\\Collections\\PostCollectionTest::collectionPrevElementDoesNotExist",
                "15": "Tests\\Application\\Command\\Post\\CreateTest::postWasCreated",
                "16": "Tests\\Application\\Handler\\Post\\CreatePostHandlerTest::createPostWasHandled",
                "17": "Tests\\Application\\Handler\\Post\\CreatePostHandlerTest::invalidDataThrowsValidationException",
                "18": "Application\\Queries\\Post\\PostQueriesTest::queryReturnsPostById",
                "19": "Application\\Queries\\Post\\PostQueriesTest::queryReturnsNewestPost",
                "20": "Tests\\Application\\Validators\\Collection\\CollectionCreationValidatorTest::collectionCreationtValidatesInput",
                "21": "Tests\\Domain\\Entity\\PostTest::postAttributesAreSet",
                "22": "Tests\\Domain\\Entity\\PostTest::postIsNotPublished"
            },
            "stderr": "",
            "stdout": "TAP version 13"
        },
        {
            "file": "src\/Blog\/Domain\/Validators\/Post\/CreatePostValidator.php",
            "mutator": "\\Humbug\\Mutator\\Boolean\\LogicalNot",
            "class": "\\Blog\\Domain\\Validators\\Post\\CreatePostValidator",
            "method": "validate",
            "line": 76,
            "diff": "--- Original\n+++ New\n@@ @@\n \n-        if (!is_bool($postValues[Post::PUBLISHED])) {\n+        if (is_bool($postValues[Post::PUBLISHED])) {\n             throw new InvalidArgumentException();\n         }\n \n         if (!$postValues[Post::PUBLISHED_AT] instanceof \\DateTime) {\n             throw new InvalidArgumentException();\n         }",
            "tests": {
                "0": "Tests\\Application\\Collections\\PostCollectionTest::collectionStoresOnePost",
                "1": "Tests\\Application\\Collections\\PostCollectionTest::collectionStoresNPosts",
                "4": "Tests\\Application\\Collections\\PostCollectionTest::collectionCanReturnItsFirstElement",
                "5": "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsSpecifiedPost",
                "6": "Tests\\Application\\Collections\\PostCollectionTest::shiftWithOneElementLeavesCollectionEmpty",
                "7": "Tests\\Application\\Collections\\PostCollectionTest::popWithOneElementLeavesCollectionEmpty",
                "8": "Tests\\Application\\Collections\\PostCollectionTest::shiftRemovesFirstElement",
                "9": "Tests\\Application\\Collections\\PostCollectionTest::popRemovesLasElement",
                "10": "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsAllPosts",
                "11": "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsNextElement",
                "12": "Tests\\Application\\Collections\\PostCollectionTest::collectionNextElementDoesNotExist",
                "13": "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsPrevElement",
                "14": "Tests\\Application\\Collections\\PostCollectionTest::collectionPrevElementDoesNotExist",
                "15": "Tests\\Application\\Command\\Post\\CreateTest::postWasCreated",
                "16": "Tests\\Application\\Handler\\Post\\CreatePostHandlerTest::createPostWasHandled",
                "17": "Application\\Queries\\Post\\PostQueriesTest::queryReturnsPostById",
                "18": "Application\\Queries\\Post\\PostQueriesTest::queryReturnsNewestPost",
                "19": "Tests\\Application\\Validators\\Collection\\CollectionCreationValidatorTest::collectionCreationtValidatesInput",
                "20": "Tests\\Domain\\Entity\\PostTest::postAttributesAreSet",
                "21": "Tests\\Domain\\Entity\\PostTest::postIsNotPublished"
            },
            "stderr": "",
            "stdout": "TAP version 13"
        },
        {
            "file": "src\/Blog\/Domain\/Validators\/Post\/CreatePostValidator.php",
            "mutator": "\\Humbug\\Mutator\\Boolean\\LogicalNot",
            "class": "\\Blog\\Domain\\Validators\\Post\\CreatePostValidator",
            "method": "validate",
            "line": 80,
            "diff": "--- Original\n+++ New\n@@ @@\n \n-        if (!$postValues[Post::PUBLISHED_AT] instanceof \\DateTime) {\n+        if ($postValues[Post::PUBLISHED_AT] instanceof \\DateTime) {\n             throw new InvalidArgumentException();\n         }\n     }\n }\n",
            "tests": {
                "0": "Tests\\Application\\Collections\\PostCollectionTest::collectionStoresOnePost",
                "1": "Tests\\Application\\Collections\\PostCollectionTest::collectionStoresNPosts",
                "4": "Tests\\Application\\Collections\\PostCollectionTest::collectionCanReturnItsFirstElement",
                "5": "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsSpecifiedPost",
                "6": "Tests\\Application\\Collections\\PostCollectionTest::shiftWithOneElementLeavesCollectionEmpty",
                "7": "Tests\\Application\\Collections\\PostCollectionTest::popWithOneElementLeavesCollectionEmpty",
                "8": "Tests\\Application\\Collections\\PostCollectionTest::shiftRemovesFirstElement",
                "9": "Tests\\Application\\Collections\\PostCollectionTest::popRemovesLasElement",
                "10": "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsAllPosts",
                "11": "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsNextElement",
                "12": "Tests\\Application\\Collections\\PostCollectionTest::collectionNextElementDoesNotExist",
                "13": "Tests\\Application\\Collections\\PostCollectionTest::collectionReturnsPrevElement",
                "14": "Tests\\Application\\Collections\\PostCollectionTest::collectionPrevElementDoesNotExist",
                "15": "Tests\\Application\\Command\\Post\\CreateTest::postWasCreated",
                "16": "Tests\\Application\\Handler\\Post\\CreatePostHandlerTest::createPostWasHandled",
                "17": "Application\\Queries\\Post\\PostQueriesTest::queryReturnsPostById",
                "18": "Application\\Queries\\Post\\PostQueriesTest::queryReturnsNewestPost",
                "19": "Tests\\Application\\Validators\\Collection\\CollectionCreationValidatorTest::collectionCreationtValidatesInput",
                "20": "Tests\\Domain\\Entity\\PostTest::postAttributesAreSet",
                "21": "Tests\\Domain\\Entity\\PostTest::postIsNotPublished"
            },
            "stderr": "",
            "stdout": "TAP version 13"
        }
    ]
}