Humbug running test suite to generate logs and code coverage data...
Humbug has completed the initial test run successfully.
Tests: 56 Line Coverage: 94.33%
Humbug is analysing source files...
Mutation Testing is commencing on 56 files...
(.: killed, M: escaped, S: uncovered, E: fatal error, T: timed out)
..SS.M..S..M....SS.....M....EM..MMMM.M.M.SSS...SS..MM.
54 mutations were generated:
      31 mutants were killed
      10 mutants were not covered by tests
      12 covered mutants were not detected
       1 fatal errors were encountered
       0 time outs were encountered

Metrics:
    Mutation Score Indicator (MSI): 59%
    Mutation Code Coverage: 81%
    Covered Code MSI: 73%

Remember that some mutants will inevitably be harmless (i.e. false positives).
Time: 14.45 seconds Memory: 6.00MB
Humbug results are being logged as JSON to: documentation/humbug/report.json
Humbug results are being logged as TEXT to: documentation/humbug/report.txt

------
Uncovered
------


1) Mutator \Humbug\Mutator\ReturnValue\FunctionCall on \Blog\Domain\Collections\Collection::next() in /var/www/html/src/Domain/Collections/Collection.php on line 47
2) Mutator \Humbug\Mutator\ReturnValue\FunctionCall on \Blog\Domain\Collections\Collection::prev() in /var/www/html/src/Domain/Collections/Collection.php on line 56
3) Mutator \Humbug\Mutator\ReturnValue\BracketedStatement on \Blog\Domain\Collections\Collection::validateInput() in /var/www/html/src/Domain/Collections/Collection.php on line 161
4) Mutator \Humbug\Mutator\Boolean\LogicalNot on \Domain\Validators\Collection\CollectionCreationValidator::validate() in /var/www/html/src/Domain/Validators/Collection/CollectionCreationValidator.php on line 29
5) Mutator \Humbug\Mutator\Boolean\TrueValue on \Domain\Validators\Collection\CollectionCreationValidator::validate() in /var/www/html/src/Domain/Validators/Collection/CollectionCreationValidator.php on line 34
6) Mutator \Humbug\Mutator\Number\IntegerValue on \Blog\Tests\Domain\Collections\::nPostCreatorProvider() in /var/www/html/src/Tests/Domain/Collections/PostCollectionTest.php on line 172
7) Mutator \Humbug\Mutator\Number\IntegerValue on \Blog\Tests\Domain\Collections\::nPostCreatorProvider() in /var/www/html/src/Tests/Domain/Collections/PostCollectionTest.php on line 173
8) Mutator \Humbug\Mutator\Number\IntegerValue on \Blog\Tests\Domain\Collections\::nPostCreatorProvider() in /var/www/html/src/Tests/Domain/Collections/PostCollectionTest.php on line 174
9) Mutator \Humbug\Mutator\Number\IntegerValue on \Blog\Tests\Domain\Validators\DataObject\Email\EmailValidatorTest::invalidEmailsProvider() in /var/www/html/src/Tests/Domain/Validators/DataObject/Email/EmailValidatorTest.php on line 50
10) Mutator \Humbug\Mutator\Boolean\TrueValue on \Blog\Tests\Domain\Validators\DataObject\Email\EmailValidatorTest::invalidEmailsProvider() in /var/www/html/src/Tests/Domain/Validators/DataObject/Email/EmailValidatorTest.php on line 51


------
Escapes
------


1) \Humbug\Mutator\Boolean\TrueValue
Diff on \Blog\Domain\Collections\Collection::add() in /var/www/html/src/Domain/Collections/Collection.php:
--- Original
+++ New
@@ @@
         $this->elements[$element->getId()] = $element;
-        return true;
+        return false;
     }
 
     /**
      * @access protected
      * @param $index
      * @return EntityInterface


2) \Humbug\Mutator\Boolean\LogicalAnd
Diff on \Blog\Domain\DataObject\Email\Email::get() in /var/www/html/src/Domain/DataObject/Email/Email.php:
--- Original
+++ New
@@ @@
 
-        if ('' !== $this->getUserName() && '' !== $this->getHost()) {
+        if ('' !== $this->getUserName() || '' !== $this->getHost()) {
             $email = $this->getUserName() . BString::AT . $this->getHost();
         }
 
         return $email;
     }
 


3) \Humbug\Mutator\Number\IntegerValue
Diff on \Application\Queries\Post\PostQueriesTest::queryReturnsPostById() in /var/www/html/src/Tests/Application/Queries/Post/PostQueriesTest.php:
--- Original
+++ New
@@ @@
         $postQuery = new PostQueries(new FakeReadOnlyRepository());
-        $this->assertInstanceOf(Post::class, $postQuery->findPostById(1));
+        $this->assertInstanceOf(Post::class, $postQuery->findPostById(0));
     }
 
     /**
      * @access public
      * @test
      */


4) \Humbug\Mutator\Number\IntegerValue
Diff on \Blog\Tests\Domain\Collections\::collectionCanReturnItsFirstElement() in /var/www/html/src/Tests/Domain/Collections/PostCollectionTest.php:
--- Original
+++ New
@@ @@
         $firstPost = FakePostCreator::createPost();
-        $secondPost = FakePostCreator::createPost(2);
+        $secondPost = FakePostCreator::createPost(3);
         $collection = new PostCollection();
         $collection->addPost($firstPost);
         $collection->addPost($secondPost);
 
         $this->assertEquals($firstPost, $collection->getFirstPost());
     }


5) \Humbug\Mutator\Number\IntegerValue
Diff on \Blog\Tests\Domain\Collections\::collectionThrowsExceptionIfPostDoesNotExists() in /var/www/html/src/Tests/Domain/Collections/PostCollectionTest.php:
--- Original
+++ New
@@ @@
         $collection = new PostCollection();
-        $collection->getPost(1337);
+        $collection->getPost(1338);
     }
 
     /**
      * @test
      */
     public function shiftWithOneElementLeavesCollectionEmpty()


6) \Humbug\Mutator\Number\IntegerValue
Diff on \Blog\Tests\Domain\Collections\::shiftWithOneElementLeavesCollectionEmpty() in /var/www/html/src/Tests/Domain/Collections/PostCollectionTest.php:
--- Original
+++ New
@@ @@
     {
-        $post = FakePostCreator::createPost(1337);
+        $post = FakePostCreator::createPost(1338);
         $collection = new PostCollection();
         $collection->addPost($post);
 
         $this->assertEquals($post, $collection->shift());
         $this->assertEmpty($collection->getAllPosts());
     }


7) \Humbug\Mutator\Number\IntegerValue
Diff on \Blog\Tests\Domain\Collections\::popWithOneElementLeavesCollectionEmpty() in /var/www/html/src/Tests/Domain/Collections/PostCollectionTest.php:
--- Original
+++ New
@@ @@
     {
-        $post = FakePostCreator::createPost(1337);
+        $post = FakePostCreator::createPost(1338);
         $collection = new PostCollection();
         $collection->addPost($post);
 
         $this->assertEquals($post, $collection->pop());
         $this->assertEmpty($collection->getAllPosts());
     }


8) \Humbug\Mutator\Number\IntegerValue
Diff on \Blog\Tests\Domain\Collections\::shiftRemovesFirstElement() in /var/www/html/src/Tests/Domain/Collections/PostCollectionTest.php:
--- Original
+++ New
@@ @@
         $firstPost = FakePostCreator::createPost();
-        $secondPost = FakePostCreator::createPost(2);
+        $secondPost = FakePostCreator::createPost(3);
         $collection = new PostCollection();
         $collection->addPost($firstPost);
         $collection->addPost($secondPost);
 
         $this->assertEquals($firstPost, $collection->shift());
         $this->assertCount(1, $collection->getAllPosts());


9) \Humbug\Mutator\Number\IntegerValue
Diff on \Blog\Tests\Domain\Collections\::popRemovesLasElement() in /var/www/html/src/Tests/Domain/Collections/PostCollectionTest.php:
--- Original
+++ New
@@ @@
         $firstPost = FakePostCreator::createPost();
-        $secondPost = FakePostCreator::createPost(2);
+        $secondPost = FakePostCreator::createPost(3);
         $collection = new PostCollection();
         $collection->addPost($firstPost);
         $collection->addPost($secondPost);
 
         $this->assertEquals($secondPost, $collection->pop());
         $this->assertCount(1, $collection->getAllPosts());


10) \Humbug\Mutator\Number\IntegerValue
Diff on \Blog\Tests\Domain\Collections\::collectionReturnsAllPosts() in /var/www/html/src/Tests/Domain/Collections/PostCollectionTest.php:
--- Original
+++ New
@@ @@
         $firstPost = FakePostCreator::createPost();
-        $secondPost = FakePostCreator::createPost(2);
+        $secondPost = FakePostCreator::createPost(3);
         $collection = new PostCollection();
         $collection->addPost($firstPost);
         $collection->addPost($secondPost);
 
         $this->assertCount(2, $collection->getAllPosts());
     }


11) \Humbug\Mutator\Number\IntegerValue
Diff on \Blog\Tests\Stubs\Post\FakePostCreator::createPostDefaultArrayValues() in /var/www/html/src/Tests/Stubs/Post/FakePostCreator.php:
--- Original
+++ New
@@ @@
         return [
-            Post::ID => 1,
+            Post::ID => 0,
             Post::TITLE => 'Fake Title',
             Post::CONTENT => 'fake content',
             Post::PUBLISHED => true,
             Post::CREATED_AT => new \DateTime(),
             Post::PUBLISHED_AT => new \DateTime(),
             Post::UPDATED_AT => new \DateTime()


12) \Humbug\Mutator\Boolean\TrueValue
Diff on \Blog\Tests\Stubs\Post\FakePostCreator::createPostDefaultArrayValues() in /var/www/html/src/Tests/Stubs/Post/FakePostCreator.php:
--- Original
+++ New
@@ @@
             Post::CONTENT => 'fake content',
-            Post::PUBLISHED => true,
+            Post::PUBLISHED => false,
             Post::CREATED_AT => new \DateTime(),
             Post::PUBLISHED_AT => new \DateTime(),
             Post::UPDATED_AT => new \DateTime()
         ];
     }
 }


------
Errors
------


1) \Humbug\Mutator\Increment\Increment
Diff on \Blog\Tests\Domain\Collections\::collectionStoresNPosts() in /var/www/html/src/Tests/Domain/Collections/PostCollectionTest.php:
--- Original
+++ New
@@ @@
 
-        for($i = 0; $i < $maxPosts ; $i++) {
+        for($i = 0; $i < $maxPosts ; $i--) {
             $collection->addPost(FakePostCreator::createPost($i));
         }
 
         $this->assertCount($maxPosts, $collection->getAllPosts());
     }
 

